{"version":3,"sources":["main.js"],"names":["resolve","value","Promise","then","_next","_throw","module","exports","fn","url","this","source","contentLoop","getElementById","searchForm","document","args","ratingEntries","template","Handlebars","compile","err","undefined","buffer","rH1JPG","2","require","process","axios","get","__argument1","__argument2","__argument3","__filename","__dirname","obj","__esModule","feedback","call","self","window","Buffer","arguments","context","3","items","myItems","g","Function","Object","getOwnPropertyNames","indexOf","searchInput","addEventListener","regeneratorRuntime","element","classList","hadRuntime","oldRuntime","e","picked","./runtime","4","__argument0","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator"],"mappings":"mgBAAA,wBAGCA,EAAAC,GAAAC,QAAAF,QAAAC,GAAAE,KAAAC,EAAAC,GAkBIC,EAAAC,QAlBJ,SAAAC,GAAA,OAAA,WAESC,IAAAA,EAFTC,KAGSC,EAAAA,UACAC,OAAAA,IAAAA,QAJT,SAIgCC,EAAAA,GACvBC,IAAAA,EAAAA,EAAAA,MAAaC,EAAQC,GAErBC,SAAAA,EAAAA,GAEAC,EAAWC,EAAAA,EAAWC,EAAQT,EATvCN,EAAA,OAAAJ,GAWO,SAAAI,EAAUgB,0BAGTjB,OAAAkB,yRAdR,CAAAC,OAAA,GAAAC,OAAA,KAAAC,EAAA,CAAA,SAAAC,EAAApB,EAAAC,IAAA,SAAAoB,EAoB0BC,EAAAA,EAAMC,EApBhCC,EAAAC,EAAAC,EAAAC,EAAAC,GAyBO5B,EAAAC,oBAzBP,OAAA4B,GAAAA,EAAAC,WAAAD,EAAA,CAoBSE,QAAAA,MAMLC,KAAA5B,KA1BJgB,EAAA,UAAA,oBAAAa,KAAAA,KAAA,oBAAAC,OAAAA,OAAA,GAAAd,EAAA,UAAAe,OAAAC,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAA,sEAAA,+CA2BSC,CAAAA,OAAAA,GAAAA,OAAU,KAAAC,EAAA,CAAA,SAAAlB,EAAApB,EAAAC,IACZsC,SAAAA,EAAOC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAYH,IAAAC,EAAA,WACH,OAAArC,MAFD,iBAAA6B,MAAAA,KACI,IAEJS,SAAML,cAANK,GAIApC,EAAAA,EAAAA,oBA9CP,GA+CIqC,OAAAC,oBA/CJH,GAAAI,QAAA,sBAkDGC,EAAAA,GAAYC,EAAAA,mBAUJ,GANAN,EAAAO,wBAAIX,EAGJY,EAAAA,QAAAA,EAAQC,aAGRC,EAECV,EAAAO,mBAAMI,kBAEPX,EAAAO,mBACI,MAAAK,GACIZ,EAAAO,wBAAOM,KAEDtB,KAAA5B,KAAAgB,EAAV,UAAA,oBAAAa,KAAAA,KAAA,oBAAAC,OAAAA,OAAA,GAAAd,EAAA,UAAAe,OAAAC,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAA,wFAAA,wEAGH,CAAAmB,YAPD,EAAAtC,OAOO,GAAAC,OAAA,KAAAsC,EAAA,CAAA,SAAApC,EAAApB,EAAAC,IACHoC,SAAAA,EAAAA,EAAUF,EAAAsB,EAAAjC,EAAAC,EAAAC,EAAAC,EAAAC,IAQrB,SA5BD8B,gBApDH,IAAA1C,EAAA2C,EAAAhB,OAAAiB,UAAAC,EAAAF,EAAAG,eAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAADC,EAAAJ,EAAAK,eAAA,g6LAgFK","file":"../app.js","sourcesContent":["import Handlebars from 'handlebars';\nimport axios from 'axios';\n\n(async function (){\n    let html;\n    const url = 'https://static.usabilla.com/recruitment/apidemo.json';\n    const source = document.getElementById('row-template').innerHTML;\n    const contentLoop = document.getElementById('content-loop');\n    const searchForm = document.getElementById('searchForm');\n    const searchInput = document.getElementById('searchInput');\n    const ratingEntries = document.querySelectorAll('[id^=\"rating\"]');\n\n    const template = Handlebars.compile(source);\n    const getDevice = resolution => {\n        let device = 'Mobile';\n        if(resolution >= 1024) {\n            device = 'Desktop'\n        } else if(resolution >= 720) {\n            device = 'Tablet'\n        }\n        return device;\n    };\n    \n    const feedback = await axios.get(url);\n\n    const { data: { items } } = feedback;\n    const myItems = items.map(item => {\n        item.device = getDevice(item.viewport.width);\n        return item;\n    })\n    const context = {\n        items: myItems\n    };\n    html = template(context);\n    contentLoop.innerHTML = html;\n\n    const searchFn = event => {\n        event.preventDefault();\n        const inputValue = searchInput.value;\n\n        const regEx = new RegExp(inputValue, 'i');\n\n        const filteredItems = myItems.filter(item => {\n            return regEx.test(item.comment)\n        })\n        const context = {\n            items: filteredItems\n        };\n        html = template(context);\n        contentLoop.innerHTML = html;\n    }\n\n    searchForm.addEventListener('submit', searchFn);\n    searchInput.addEventListener('input', searchFn);\n\n    ratingEntries.forEach(entry => {\n        entry.addEventListener('click', event => {\n            let context;\n            const element = event.target;\n            \n            element.classList.toggle('selected');\n            const selectedElements = document.querySelectorAll('.selected');\n\n            const picked = Array.from(selectedElements).filter(element => {\n                return element.classList.contains('selected');\n            }).map(element => element.textContent);\n\n            if(element.classList.contains('selected')) {\n                const filteredItems = myItems.filter(item => {\n                    return picked.includes(item.rating.toString());\n                })\n                context = {\n                    items: filteredItems\n                };\n            } else {\n                context = {\n                    items: myItems\n                }\n            }\n            \n            html = template(context);\n            contentLoop.innerHTML = html;\n        })\n    })\n    // module.exports = { template };\n}());\n\n\n"]}